# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `music2.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Music2
_M_Music2 = Ice.openModule('Music2')
__name__ = 'Music2'

if 'MusicData' not in _M_Music2.__dict__:
    _M_Music2.MusicData = Ice.createTempClass()
    class MusicData(object):
        def __init__(self, id=0, title='', artist='', filePath=''):
            self.id = id
            self.title = title
            self.artist = artist
            self.filePath = filePath

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.title)
            _h = 5 * _h + Ice.getHash(self.artist)
            _h = 5 * _h + Ice.getHash(self.filePath)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Music2.MusicData):
                return NotImplemented
            else:
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.title is None or other.title is None:
                    if self.title != other.title:
                        return (-1 if self.title is None else 1)
                else:
                    if self.title < other.title:
                        return -1
                    elif self.title > other.title:
                        return 1
                if self.artist is None or other.artist is None:
                    if self.artist != other.artist:
                        return (-1 if self.artist is None else 1)
                else:
                    if self.artist < other.artist:
                        return -1
                    elif self.artist > other.artist:
                        return 1
                if self.filePath is None or other.filePath is None:
                    if self.filePath != other.filePath:
                        return (-1 if self.filePath is None else 1)
                else:
                    if self.filePath < other.filePath:
                        return -1
                    elif self.filePath > other.filePath:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Music2._t_MusicData)

        __repr__ = __str__

    _M_Music2._t_MusicData = IcePy.defineStruct('::Music2::MusicData', MusicData, (), (
        ('id', (), IcePy._t_int),
        ('title', (), IcePy._t_string),
        ('artist', (), IcePy._t_string),
        ('filePath', (), IcePy._t_string)
    ))

    _M_Music2.MusicData = MusicData
    del MusicData

if '_t_MusicDataSeq' not in _M_Music2.__dict__:
    _M_Music2._t_MusicDataSeq = IcePy.defineSequence('::Music2::MusicDataSeq', (), _M_Music2._t_MusicData)

_M_Music2._t_MusicService2 = IcePy.defineValue('::Music2::MusicService2', Ice.Value, -1, (), False, True, None, ())

if 'MusicService2Prx' not in _M_Music2.__dict__:
    _M_Music2.MusicService2Prx = Ice.createTempClass()
    class MusicService2Prx(Ice.ObjectPrx):

        def getAll(self, context=None):
            return _M_Music2.MusicService2._op_getAll.invoke(self, ((), context))

        def getAllAsync(self, context=None):
            return _M_Music2.MusicService2._op_getAll.invokeAsync(self, ((), context))

        def begin_getAll(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Music2.MusicService2._op_getAll.begin(self, ((), _response, _ex, _sent, context))

        def end_getAll(self, _r):
            return _M_Music2.MusicService2._op_getAll.end(self, _r)

        def getById(self, id, context=None):
            return _M_Music2.MusicService2._op_getById.invoke(self, ((id, ), context))

        def getByIdAsync(self, id, context=None):
            return _M_Music2.MusicService2._op_getById.invokeAsync(self, ((id, ), context))

        def begin_getById(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_Music2.MusicService2._op_getById.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_getById(self, _r):
            return _M_Music2.MusicService2._op_getById.end(self, _r)

        def searchByArtist(self, artist, context=None):
            return _M_Music2.MusicService2._op_searchByArtist.invoke(self, ((artist, ), context))

        def searchByArtistAsync(self, artist, context=None):
            return _M_Music2.MusicService2._op_searchByArtist.invokeAsync(self, ((artist, ), context))

        def begin_searchByArtist(self, artist, _response=None, _ex=None, _sent=None, context=None):
            return _M_Music2.MusicService2._op_searchByArtist.begin(self, ((artist, ), _response, _ex, _sent, context))

        def end_searchByArtist(self, _r):
            return _M_Music2.MusicService2._op_searchByArtist.end(self, _r)

        def searchByTitle(self, title, context=None):
            return _M_Music2.MusicService2._op_searchByTitle.invoke(self, ((title, ), context))

        def searchByTitleAsync(self, title, context=None):
            return _M_Music2.MusicService2._op_searchByTitle.invokeAsync(self, ((title, ), context))

        def begin_searchByTitle(self, title, _response=None, _ex=None, _sent=None, context=None):
            return _M_Music2.MusicService2._op_searchByTitle.begin(self, ((title, ), _response, _ex, _sent, context))

        def end_searchByTitle(self, _r):
            return _M_Music2.MusicService2._op_searchByTitle.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Music2.MusicService2Prx.ice_checkedCast(proxy, '::Music2::MusicService2', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Music2.MusicService2Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Music2::MusicService2'
    _M_Music2._t_MusicService2Prx = IcePy.defineProxy('::Music2::MusicService2', MusicService2Prx)

    _M_Music2.MusicService2Prx = MusicService2Prx
    del MusicService2Prx

    _M_Music2.MusicService2 = Ice.createTempClass()
    class MusicService2(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Music2::MusicService2')

        def ice_id(self, current=None):
            return '::Music2::MusicService2'

        @staticmethod
        def ice_staticId():
            return '::Music2::MusicService2'

        def getAll(self, current=None):
            raise NotImplementedError("servant method 'getAll' not implemented")

        def getById(self, id, current=None):
            raise NotImplementedError("servant method 'getById' not implemented")

        def searchByArtist(self, artist, current=None):
            raise NotImplementedError("servant method 'searchByArtist' not implemented")

        def searchByTitle(self, title, current=None):
            raise NotImplementedError("servant method 'searchByTitle' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Music2._t_MusicService2Disp)

        __repr__ = __str__

    _M_Music2._t_MusicService2Disp = IcePy.defineClass('::Music2::MusicService2', MusicService2, (), None, ())
    MusicService2._ice_type = _M_Music2._t_MusicService2Disp

    MusicService2._op_getAll = IcePy.Operation('getAll', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Music2._t_MusicDataSeq, False, 0), ())
    MusicService2._op_getById = IcePy.Operation('getById', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_Music2._t_MusicData, False, 0), ())
    MusicService2._op_searchByArtist = IcePy.Operation('searchByArtist', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Music2._t_MusicDataSeq, False, 0), ())
    MusicService2._op_searchByTitle = IcePy.Operation('searchByTitle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Music2._t_MusicDataSeq, False, 0), ())

    _M_Music2.MusicService2 = MusicService2
    del MusicService2

# End of module Music2
