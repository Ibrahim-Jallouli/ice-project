# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `music1.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Music1
_M_Music1 = Ice.openModule('Music1')
__name__ = 'Music1'

_M_Music1._t_MusicService = IcePy.defineValue('::Music1::MusicService', Ice.Value, -1, (), False, True, None, ())

if 'MusicServicePrx' not in _M_Music1.__dict__:
    _M_Music1.MusicServicePrx = Ice.createTempClass()
    class MusicServicePrx(Ice.ObjectPrx):

        def createMusic(self, title, artist, filePath, context=None):
            return _M_Music1.MusicService._op_createMusic.invoke(self, ((title, artist, filePath), context))

        def createMusicAsync(self, title, artist, filePath, context=None):
            return _M_Music1.MusicService._op_createMusic.invokeAsync(self, ((title, artist, filePath), context))

        def begin_createMusic(self, title, artist, filePath, _response=None, _ex=None, _sent=None, context=None):
            return _M_Music1.MusicService._op_createMusic.begin(self, ((title, artist, filePath), _response, _ex, _sent, context))

        def end_createMusic(self, _r):
            return _M_Music1.MusicService._op_createMusic.end(self, _r)

        def updateMusic(self, id, title, artist, filePath, context=None):
            return _M_Music1.MusicService._op_updateMusic.invoke(self, ((id, title, artist, filePath), context))

        def updateMusicAsync(self, id, title, artist, filePath, context=None):
            return _M_Music1.MusicService._op_updateMusic.invokeAsync(self, ((id, title, artist, filePath), context))

        def begin_updateMusic(self, id, title, artist, filePath, _response=None, _ex=None, _sent=None, context=None):
            return _M_Music1.MusicService._op_updateMusic.begin(self, ((id, title, artist, filePath), _response, _ex, _sent, context))

        def end_updateMusic(self, _r):
            return _M_Music1.MusicService._op_updateMusic.end(self, _r)

        def deleteMusic(self, id, context=None):
            return _M_Music1.MusicService._op_deleteMusic.invoke(self, ((id, ), context))

        def deleteMusicAsync(self, id, context=None):
            return _M_Music1.MusicService._op_deleteMusic.invokeAsync(self, ((id, ), context))

        def begin_deleteMusic(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_Music1.MusicService._op_deleteMusic.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_deleteMusic(self, _r):
            return _M_Music1.MusicService._op_deleteMusic.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Music1.MusicServicePrx.ice_checkedCast(proxy, '::Music1::MusicService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Music1.MusicServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Music1::MusicService'
    _M_Music1._t_MusicServicePrx = IcePy.defineProxy('::Music1::MusicService', MusicServicePrx)

    _M_Music1.MusicServicePrx = MusicServicePrx
    del MusicServicePrx

    _M_Music1.MusicService = Ice.createTempClass()
    class MusicService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Music1::MusicService')

        def ice_id(self, current=None):
            return '::Music1::MusicService'

        @staticmethod
        def ice_staticId():
            return '::Music1::MusicService'

        def createMusic(self, title, artist, filePath, current=None):
            raise NotImplementedError("servant method 'createMusic' not implemented")

        def updateMusic(self, id, title, artist, filePath, current=None):
            raise NotImplementedError("servant method 'updateMusic' not implemented")

        def deleteMusic(self, id, current=None):
            raise NotImplementedError("servant method 'deleteMusic' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Music1._t_MusicServiceDisp)

        __repr__ = __str__

    _M_Music1._t_MusicServiceDisp = IcePy.defineClass('::Music1::MusicService', MusicService, (), None, ())
    MusicService._ice_type = _M_Music1._t_MusicServiceDisp

    MusicService._op_createMusic = IcePy.Operation('createMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    MusicService._op_updateMusic = IcePy.Operation('updateMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    MusicService._op_deleteMusic = IcePy.Operation('deleteMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())

    _M_Music1.MusicService = MusicService
    del MusicService

# End of module Music1
